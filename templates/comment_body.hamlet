$newline never
$# used by commentTreeWidget function

<div .comment :is_unapproved:.unapproved :is_top_level:.top_level :is_even_depth:.even_depth :is_odd_depth:.odd_depth>
    <div>
        <span .comment-head>
            $maybe author_avatar <- userAvatar user
                <a href="@{UserR user_id}">
                    <img .small_avatar src="#{author_avatar}"> #
            <a href="@{UserR user_id}">
                #{userPrintName (Entity user_id user)}
        <span .comment-head>
            ^{renderTime $ commentCreatedTs comment}
        <span .comment-head>
            |
        <span .comment-head>
            <a href="@{DiscussCommentR project_handle target comment_id}">
                permalink
        $maybe parent_id <- commentParent comment
            <span .comment-head>
                |
            <span .comment-head>
                <a href="@{DiscussCommentR project_handle target parent_id}">
                    parent

    $maybe Entity ticket_id _ <- mticket
        <div .ticket>SD-#{toPathPiece ticket_id}

    $forall closure <- earlier_closures
        $case commentClosureType closure
            $of Retracted
                <div .retracted>
                    A comment above this one was retracted ^{renderTime (commentClosureTs closure)}
                    ^{markdownWidget project_handle (commentClosureReason closure)}

            $of Closed
                <div .closed>
                    A comment above this one was closed at ^{renderTime (commentClosureTs closure)}
                    ^{markdownWidget project_handle (commentClosureReason closure)}

    $maybe closure <- mclosure
        $case commentClosureType closure
            $of Retracted
                <div .retracted>
                    The author retracted this comment ^{renderTime (commentClosureTs closure)}
                    ^{markdownWidget project_handle (commentClosureReason closure)}

            $of Closed
                <div .closed>
                    $if commentClosureClosedBy closure == user_id
                        The author
                    $else
                        ^{userWidget $ commentClosureClosedBy closure}
                    \ closed this comment ^{renderTime (commentClosureTs closure)}
                    ^{markdownWidget project_handle (commentClosureReason closure)}

    ^{markdownWidget project_handle (commentText comment)}


    $if show_actions
        <div>
            $forall tag <- tags
                ^{tagWidget tag}

    <div .comment-action>
        $if show_actions
            $if is_mod
                $if is_unapproved
                    <span .comment-action>
                        <a href="@{ApproveWikiCommentR project_handle target comment_id}">
                            approve

                    <span .comment-action>
                        <a href="@{UserR user_id}">
                            establish user

            $if not (current_route == ReplyCommentR project_handle target comment_id)
                <span .comment-action>
                    <a href="@{ReplyCommentR project_handle target comment_id}">
                        reply

            $if can_retract
                <span .comment-action>
                    <a href="@{RetractWikiCommentR project_handle target comment_id}" style="color: darkred">
                        retract

            $if can_close
                <span .comment-action>
                    <a href="@{CloseWikiCommentR project_handle target comment_id}" style="color: goldenrod">
                        close

            $if can_rethread
                <span .comment-action>
                    <a href="@{RethreadWikiCommentR project_handle target comment_id}">
                        rethread

            ^{newTagWidget $ NewCommentTagR project_handle target comment_id}

    $maybe comment_form <- mcomment_form
        <div .comment :is_even_depth:.odd_depth :is_odd_depth:.even_depth>
            <form action="@{current_route}" method="POST">
                ^{comment_form}
                <input type="submit" name="mode" value="preview">

    $if depth > max_depth
        $with replies <- countReplies children
            $if replies > 0
                <br>
                <br>
                <em>
                    <a href="@{DiscussCommentR project_handle target comment_id}">
                        #{replies} more #{plural replies "reply" "replies"}

    $else
        $# We only want to display the closures/reractions from above the viewed comment on the first comment,
        $# not all comments in the tree.
        ^{commentForestWidget children [] user_map closure_map ticket_map tag_map project_handle target max_depth (depth + 1) show_actions Nothing}
