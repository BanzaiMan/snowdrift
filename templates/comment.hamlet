<div .comment :is_unapproved:.unapproved :is_top_level:.top_level :is_even_depth:.even_depth :is_odd_depth:.odd_depth>
    <div>
        <div .comment-head>
            $maybe author_avatar <- userAvatar user
                <a href="@{UserR user_id}">
                    <img .small_avatar src="#{author_avatar}"> #
            <a href="@{UserR user_id}">
                #{userDisplayName (Entity user_id user)}
        <div .comment-head>
            $maybe approved_ts <- commentApprovedTs comment
                ^{renderTime approved_ts}
            $nothing
                ^{renderTime $ commentCreatedTs comment}
        <div .comment-head :is_preview:.preview>
            |
        <div .comment-head :is_preview:.preview>
            <a href="@{comment_route_permalink comment_id}">
                permalink
        $maybe parent_id <- commentParent comment
            <div .comment-head :is_preview:.preview>
                |
            <div .comment-head :is_preview:.preview>
                <a href="@{comment_route_permalink parent_id}">
                    parent

    <div :is_preview:.preview>

        $if can_edit
            <div .comment-action>
                <a href="@{comment_route_edit comment_id}">
                    edit

        $if can_delete
            <div .comment-action>
                <a href="@{comment_route_delete comment_id}">
                    delete

        $if can_retract
            <div .comment-action>
                <a href="@{comment_route_retract comment_id}" style="color: darkred">
                    retract

    $forall closure <- earlier_closures
        $case commentClosureType closure
            $of Retracted
                <div .retracted>
                    A comment above this one was retracted ^{renderTime (commentClosureTs closure)}
                    #{commentClosureReason closure}

            $of Closed
                <div .closed>
                    A comment above this one was closed at ^{renderTime (commentClosureTs closure)}
                    #{commentClosureReason closure}

    $maybe closure <- mclosure
        $case commentClosureType closure
            $of Retracted
                <div .retracted>
                    The author retracted this comment ^{renderTime (commentClosureTs closure)}
                    #{commentClosureReason closure}

            $of Closed
                <div .closed>
                    $if commentClosureClosedBy closure == user_id
                        The author
                    $else
                        ^{userNameWidget $ commentClosureClosedBy closure}
                    \ closed this comment ^{renderTime (commentClosureTs closure)}
                    #{commentClosureReason closure}

    $maybe (mflag_markdown, flag_reasons) <- mflag
        <div .flagged>
            A user flagged this comment as a violation of the
            <a href="@{WikiR "snowdrift" "conduct"}">
                Code of Conduct
            due to:
            <div .flag-reasons>#{T.intercalate ", " $ map descFlagReason flag_reasons}
            $maybe flag_markdown <- mflag_markdown
                <div .flag-markdown>
                    Additional comments:
                    #{flag_markdown}
            <i>Please edit to address these concerns and repost.

    #{commentText comment}

    <div>
        $forall tag <- tags
            ^{tagWidget tag}

    <div :is_preview:.preview>

        $if can_close
            <div .comment-action>
                <a href="@{comment_route_close comment_id}" style="color: goldenrod">
                    close

        $if can_rethread
            <div .comment-action>
                <a href="@{comment_route_rethread comment_id}">
                    rethread

        $if can_add_tag
            <div .comment-action>
                <a href="@{comment_route_add_tag comment_id}">
                    tag

        $if can_flag
            <div .comment-action>
                <a href="@{comment_route_flag comment_id}">
                    flag

        <div .comment-action>
            <a href="@{comment_route_reply comment_id}">
                reply

    <div :is_preview:.preview>
        $if can_approve
            <div .comment-action>
                <a href="@{comment_route_approve comment_id}" style="color: green">
                    approve

        $if can_establish
            <div .comment-action>
                <a href="@{UserR user_id}" style="color: green">
                    establish user
        $if can_retract
            $if is_unapproved
                <i style="color: green">comment awaiting moderator approval

    ^{inner_widget}
